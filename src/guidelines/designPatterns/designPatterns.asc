Fundamental Design Patterns
===========================

pass::[<br/>]


*****************
In this chapter, you learn about the main design patterns you will use in VS Application.

*****************


Table of Content
----------------
1. <<delegation, *Delegation*>>

2. <<mvc, *Model View Component*>>

3. <<event, *Event Notifier*>>

*****************

*****************


Delegation [[delegation]]
-------------------------
Delegation is a pattern where an object delegate the performing of a task to another 'helper' object, instead of doing by itself. There is an Inversion of Responsibility in which a helper object, known as a delegate, is given the responsibility to execute a task for the delegator. You typically use it as an alternative to class inheritance for extending the functionality of reusable objects.

Delegate methods are typically grouped together into a protocol. A protocol is basically just a list of methods. If a class conforms to (or “adopts”) a protocol, it guarantees that it implements the required methods of a protocol. (Protocols may also include optional methods.)

Example
~~~~~~~
The following example shows who to create and set a Controller delegation.
----
var myView = new vs.ui.View ({id: 'main_view');
myView.init ();

...

var delegation = {
  /** vs.fx.Controller Delegate */
  controllerViewWillChange : function (from, to, controller)
  {
    ...
  },
  
  /** vs.fx.Controller Delegate */
  controllerAnimationDidEnd : function (from, to, controller)
  {
    ..
  }
};

var controller = new vs.fx.SlideController (myView);
var controller.init ();

var controller.delegate = delegation;

----


Model-View-Component [[mvc]]
-----------------------------
The Model-View-Component (or “MVC” ;-)) design pattern sets out three roles for objects in an application.

* Model objects manages the behavior and data of a component. The component's view should refer to model data and model data should be updated after user interaction.

* View objects know how to display data (model objects) and may allow the user to edit the data.

* Component objects is the basic building blocks for building applications. They can be assembled to create your application, reference a view for graphical components (widgets) or manipulate data (model). The component manage relations between model and view and between component father and children.

Example
~~~~~~~
The following example you learn about the creation of View component with:

1. model declaration and change binding

2. view event binding.

In this exemple the view is the default one create by '*vs.ui.View*' class.
----
var MyView = vs.core.createClass (
  /** parent class */
  parent: vs.ui.View,
  
  /** Properties definition */
  properties: {
    model: vs.core.Object.PROPERTY_IN_OUT
  },
  
  /** prototype */
  initComponent: function ()
  {
    this._super ();
    this._model = new MyModel ();
    this._model.init ();
    
    // Bind to all changes
    this._model.bindChange ('', this, this.modelDidChange);
    // Bind to view events
    this.view.addEventListener (vs.core.POINTER_START, this);
  },
    
  /** Manage model changes */
  modelDidChange : function (event)
  {
    ...
  },

  /** Manage user interaction */
  handleEvent : function (event)
  {
    ...
  }
});
----

Event Notifier [[event]]
------------------------
Within the Event Notifier pattern an object called the publisher ('*vs.core.EventSource*'), maintains a list of subscriber, and notifies them automatically of any state changes.
This pattern is use for instance, with '*vs.ui.Button*' component which generate events when it is selected.


Example
~~~~~~~
----
var myButton = new vs.ui.Button ({id: 'my_button'});
myButton.init ();

...

var subscriber = {
  /** default method call by the publishier */
  notify : function (event)
  {
    ...
  }
};

myButton.bind ('select', subscriber);

----


pass::[<br/>]

