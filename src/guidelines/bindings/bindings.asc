La programmation évènementielle dans ViniSketch Designer
========================================================

pass::[<br/>]


*****************

La programmation par événements, est un principe d’architecture logicielle vous permettant de définir des actions qui serons exécutées non pas séquentiellement comme en programmation séquentielle, mais en réaction d’un événement se produisant dans votre application (typiquement en réaction d’un click de la souris). Il s’agit donc d’un concept très important en programmation d’interface homme machine, puisque votre application devra réagir aux actions de l’utilisateur, i.e. réagir à des évènements.

Un autre point très important en programmation événementielle est le concept d’observateur et de sujet (ou observé). Il s’agit d’un patron de programmation définissant un objet – le sujet – et des objets observant ce que fait le sujet – les observateurs. L’intérêt de ce patron est que le sujet n’est pas au courant qu’il est observé. Dès qu’il y a une modification de son état, il émet un signal qui averti tous les observateurs de ce sujet du changement d’état. Lors du développement d’une application complexe, vous serez rapidement confronté à ce type de problématique. La programmation événementielle est une méthode simple répondant à ce besoin. 
Donc, un événement n’est pas systématiquement lié à une action utilisateur. Il peut aussi être généré lors d’un changement d’état du système. Par exemple à la fin du chargement d’un document.

Il est d’ailleurs fortement recommandé, lors du développement d’une application interactive, de faire de la programmation asynchrone, par exemple en téléchargeant un document ou en exécutant une tâche couteuse en temps CPU, en tâche de fond, puis de générer un évènement à la fin de l’exécution de la tâche. Cela permet d’éviter tout blocage de votre application, et permet à l’utilisateur final de toujours pouvoir interagir avec l’application même si celle-ci exécute des actions complexes en même temps.


*****************


Table des matières
------------------

1. <<model, *Modèle*>>

2. <<api, *API*>>


*****************

*****************


[[model]]
Modèle
------

*****************
VS-Toolkit implement a Event Notifier pattern.
Within the Event Notifier pattern an object called the publisher ('*vs.core.EventSource*'), maintains a list of subscriber, and notifies them automatically of any state changes.
*****************


Tout événement est représenté par un objet événement, qui selon le type (événement DOM ou événement VS-Toolkit) est une instance de type DOM Event ou '*vs.core.Event*'. Cette instance stocke des informations relatives à l’événement. Typiquement le nom de l’événement, la position du pointeur de la souris lors d’un click, l’objet qui a émit l’événement, etc.

Abonnement
~~~~~~~~~~

Lorsqu’un objet veut écouter un événement produit par un autre objet, on dit qu’il s’abonne à l’évènement. Le processus d’abonnement consiste à dire quel objet on veut écouter (publisher) et sur quel type d’événement on veut réagir. Par exemple, un objet X s’abonne à un objet graphique « champ texte » sur l’événement « change ». C’est-à-dire que l’objet X veut être averti lors que le texte du champ texte change.

Emission
~~~~~~~~

L’objet qui veut émettre un événement crée l’objet événement. Il instancie la classe qui correspond au type d’événement qu’il veut émettre et renseigne l’événement avec des donnés décrivant l’événement. Enfin, il émet événement  (le propage), et le système se charge de le distribuer à tous les objets qui s’y sont abonné.
Dans certain cas, un objet recevant un événement peut décider de le réémettre ou de le transférer à un autre objet.

Type d’événement
~~~~~~~~~~~~~~~~

VS-Toolkit gère deux classes d’événement :

1. les événements DOM

2. les événements VS-Toolkit

Evènement DOM
^^^^^^^^^^^^^

Il s’agit du modèle d’événement standard W3C. Il offre la possibilité d’écouter le graphe de scène HTML (le DOM), d’être averti de son changement d’état ou d’événement utilisateur.
Dans l’architecture de la toolkit proposée par VS-Toolkit, le modèle DOM et un le système d’événement bas niveau que vous n’aurez pas à utiliser en général. Toutefois pour de besoin de performance il peut être nécessaire de descendre au niveau DOM ; dans ce cas il suffit d'utiliser les mécanismes usuels :

----
myComp.handleEvent = function (e) { ... }
myComp.view.addEventListener (spec, myComp);
----

Evènement VS-Toolkit
^^^^^^^^^^^^^^^^^^^^

XXX

Video
-----


pass::[<video src="data/bindings.m4v" controls></video>] 

[[api]]
API
---

bind(spec, obj, func)
~~~~~~~~~~~~~~~~~~~~~

The event bind method to listen events
When you want listen an event generated by this object, you can bind your object (the publisher) to this object using 'bind' method.

Parameters:
^^^^^^^^^^

- *spec [string]*
the event specification [mandatory]

- *obj [vs.core.Object]*
the object interested to catch the event [mandatory]

- *func [string]*
the name of a callback. If its not defined notify method will be called [optional]


unbind(spec, obj)
~~~~~~~~~~~~~~~~~

The event unbind method
Should be call when you want stop event listening on this object

Parameters
^^^^^^^^^^

- *spec [string]*
the event specification [mandatory]

- *obj [vs.core.Object]*
the object you want unbind [mandatory]


notify(event)
~~~~~~~~~~~~~

Notify est la fonction appelée par défaut lorsque qu'un objet reçoit un évènement auquel il s'est abonné.

Parameters
^^^^^^^^^^

- *event [vs.core.Event]*
La descripton de l'évènement.


'*vs.core.Event*' Class
~~~~~~~~~~~~~~~~~~~~~~~

An '*vs.core.Event*' object, or simply an event, contains information about an input action such as a button click or a key down. The '*vs.core.Event*' object contains pertinent information about each event, such as where the cursor was located or which character was typed.

When an event is catch by an application component, the callback receives as parameters an instance (or sub instance) of this class.

It specifies the source of the event (which object has generated the event), the type of the event and an event data.

 	
[width="100%",cols="2,10"]
|=========================================================
|*data*| The optional data associate to the event
|*src*| The component which produce the event
|*type*| The event spec. For instance 'click' for a mouse click event.
|=========================================================

pass::[<br />]

