
Utiliser des Controller dans ViniSketch Designer
================================================

pass::[<br/>]


*****************

Les Controller de VSD vous proposent un mécanisme générique pour gérer la navigation au sein d’un ensemble de vues graphiques et les états de votre application.  Ils s’appuient sur le système de FSM (Final State Machine) pour décrire des états et les transitions entre ces états, et vous permettent d’associer une vue à chaque état, et des animations pour les transitions entre états.

La classe vs.fx.Controller dont héritent tous les Controller, peut être utilisée directement mais son API peut être trop complexe. Vérifiez que des classes
telles que '*vs.fx.NavigationController*', '*vs.fx.SlideController*' … ne répondent pas à vos
besoins.

Ce document ne traitera pas de la manière dont implémenter un nouveau vs.fx.Controller. Cele fera l’objet d’un autre document. Ici nous traiterons du principe de Controller dans VSD, et de l’utilisation des implémentations existantes ('*vs.fx.Controlle*', '*vs.fx.NavigationController*', '*vs.fx.PSlideController*' …)



*****************


Table des matières
------------------

1. <<model, *Modèle*>>

2. <<api1, '*vs.fx.Controller*'>>

3. <<api2, '*vs.fx.StackController*'>>

4. <<declinaisons, *Déclinaisons du StackController*>>

5. <<api3, '*vs.fx.NavigationController*'>>


*****************

*****************


[[model]]
Modèle
------

Un Controller est une Machines à états finis (FSM) qui gère différents états conceptuels du composant et associe à ces états un état graphique.

Le changement d'états (ou transition) se déclenche sur réception d'événements.

[[api1]]
'*vs.fx.Controller*'
--------------------

'*vs.fx.Controller*' propose une API de bas niveau pour implémenter un contrôleur de vue.

Vous pouvez utiliser directement une instance d''*vs.fx.Controller*' ou créer une nouvelle classe héritant d''*vs.fx.Controller*' et proposant une API adaptée à vos besoins.

Avant d'utiliser un '*vs.fx.Controller*' vérifiez que les dérivées d''*vs.fx.Controller*', tels que, '*vs.fx.NavigationController*' ou '*vs.fx.SlideController*' ne répondent pas à vos besoins.


Exemple
~~~~~~~

image::data/image001.png[]


Code
~~~~

Exemple d'utilisation

-----------------
// 1 create and init the controller
this.controller = new vs.fx.Controller (this);
this.controller.init ();

// 2.1 put a first view into the controller
this.controller.push (this.firstView);
// 2.2 set the first view as the initial view
this.controller.initialComponent = this.firstView.id;

// 3.1 create, configure and put the second view into the controller
var comp = this.createAndAddComponent ('PanelOne');
comp.position = [0, 44];
comp.translation = [320, 0];
this.controller.push (comp);

// 3.2 declare transitions (with animations) between states
// translateOutLeft is play on firstView when we leave the firstView
// translateInRight is play on comp when we enter into comp
this.controller.addTransition (this.firstView.id, comp.id, 'goToOne',
                               translateOutLeft, translateInRight);
this.controller.addTransition (comp.id, this.firstView.id, 'back',
                               translateOutRight, translateInLeft);

// 4 create, configure and put the third view into the controller
comp = this.createAndAddComponent ('PanelTwo');
comp.position = [0, 44];
comp.translation = [320, 0];
this.controller.push (comp);

this.controller.addTransition (this.firstView.id, comp.id, 'goToTwo',
                               translateOutLeft, translateInRight);
this.controller.addTransition (comp.id, this.firstView.id, 'back',
                               translateOutRight, translateInLeft);

// 5 create, configure and put the fourth view into the controller
var comp = this.createAndAddComponent ('PanelThree');
comp.position = [0, 44];
comp.translation = [320, 0];
this.controller.push (comp);

this.controller.addTransition (this.firstView.id, comp.id, 'goToThree',
                               translateOutLeft, translateInRight);
this.controller.addTransition (comp.id, this.firstView.id, 'back',
                               translateOutRight, translateInLeft);
-----------------

API
~~~

.

[[api2]]
'*vs.fx.StackController*'
------------------------

Le contrôleur de type '*vs.fx.StackController*' permet de naviguer de façon linéaire dans des vues, en passant  d’une vue à la suivante ou la précédente. Il s’agit d’une class abstraite qui est déclinée pour proposer différents effets visuels plus ou moins complexes.

Selon l’implémentation d’un '*vs.fx.StackController*', il peut y avoir quelques petites différences d’API, mais globalement ils ont tous la même API et sont interchangeable.

API principale
~~~~~~~~~~~~~~

goToNextView()
^^^^^^^^^^^^^^
Go to the next view if it exists.

*Returns:*
true if the transition is possible, false if not (no view exists)

goToPreviousView()
^^^^^^^^^^^^^^^^^^

Go to the previous view if it exists.

*Returns:*

- true if the transition is possible, 

- false if not (no view exists)

push (comp, config, bindings)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Add a child component to the Controller Manager
The component must be a graphic component ('*vs.ui.View*').
Comp can reference a instance of '*vs.ui.View*' or can be the name of a component
that will be instantiated, init and added automaticaly.

The component instantiation is a lazy algorithm. The component will be instantiated and add into the DOM tree only when it has to be show to the user.

-----------------
var myComp = new MyComp (conf);
myComp.layer = new vs.fx.StackController (myComp, 'children');
myComp.layer.push ('AComponent1', data1);
myComp.layer.push ('AComponent1', data2);
myComp.layer.push ('AComponent2', data3);
-----------------

*Parameters:*

- {vs.ui.View | String} comp
The GUI component or the component name to instanciate

- {Object} config
Configuration structure need to build the component.

- {Array} bindings
Bindings configuration [[spec, observer, method], ...]

remove (comp)
^^^^^^^^^^^^^
Remove a child component to the Slider Manager
The component can be specified as an Object or an id.

-----------------
myComp.layer.remove (myComp);
myComp.layer.remove (myComp.id);
-----------------

*Parameters:*

- {vs.ui.View | String} comp
The GUI component object or the component id

[[declinaisons]]
Déclinaisons du StackController
-------------------------------

vs.fx.SlideController
~~~~~~~~~~~~~~~~~~~~~

Le vs.fx.SlideController, affiche toutes les vues sur un bandeau vertical ou horizontal, et permet la navigation entre les vues en faisant glisser le bandeau de droite à gauche ou de haut en bas.

Exemple
^^^^^^^

.

Code
^^^^

-----------------
var controller = new vs.fx.SlideController (myComp);

// add 4 components
controller.push ('APanel', {id: '1', data: {...}});
controller.push ('APanel', {id: '2', data: {...}});
controller.push ('APanel', {id: '3', data: {...}});
controller.push ('APanel', {id: '4', data: {...}});

controller.orientation = vs.fx.SlideController.HORIZONTAL ;
controller.duration = 200 ; // slide duration is 200 ms
-----------------


Spécificité de l’API
^^^^^^^^^^^^^^^^^^^^

orientation
+++++++++++

Setter|Setter for page slide orientation. It can take the value. vs.fx.SlideController.HORIZONTAL or vs.fx.SlideController.VERTICAL.

By default the slider is horizontal.

- *<static> vs.fx.SlideController.HORIZONTAL :*
Horizontal slide (defaut)

- *<static> vs.fx.SlideController.VERTICAL :*
Vertical slide

vs.fx.CardController
~~~~~~~~~~~~~~~~~~~~

Le vs.fx.CardController, empile toutes les vues comme un paquet de cartes. Il permet de naviguer d’une vue à la suivante ou précédente en faisant glisser la vue du dessus du paquet dans une direction donnée. En faisant glisser la vue, on fait apparaître la vue du dessous. Après avoir dépasser un certain seuil, si l’utilisateur lâche la vue elle glisse automatiquement pour disparaître et laisser apparaître complètement la vue du dessous.

Ce contrôleur permet de faire glisser une vue vers le haut, le bas, à droite ou à gauche.
Pour faire réapparaître la vue précédente, il suffit de faire glisser le pointeur dans le sens inverse de du sens de disparition de la vue. C’est-à-dire que si le contrôleur est configuré pour faire disparaître les vues vers le haut alors il faut faire glisser le pointeur de haut en bas pour faire apparaître une vue précédente.
Exemple


Spécificité de l’API
^^^^^^^^^^^^^^^^^^^^

direction
+++++++++

Getter|Setter Card slide direction

- *<static> vs.fx.CardController.LEFT_OUT :*
Slide the card from the right to the left (defaut)

- *<static> vs.fx.CardController.BOTTOM_OUT :*
Slide the card from the top to the botom

- *<static> vs.fx.CardController.RIGHT_OUT :*
Slide the card from the left to the right

- *<static> vs.fx.CardController.TOP_OUT :*
Slide the card from the bottom to the top

vs.fx.PageFlipController
~~~~~~~~~~~~~~~~~~~~~~~~
Le vs.fx.PageFlipController, affiche les vues sous la forme d’un livre. L’utilisateur peut alors tourner les pages pour passer d’une vue à la suivante. Une page tourne comme une page rigide (à la différence the vs.fx.PageCurlController qui simule une page qui se plie lors de la rotation).

Il existe deux configurations possibles (ATTENTION seulement une est implémentée pour le moment) :

-	Faire tourner une page en la faisant pivoter sur le bord du livre. Avec cette implémentation la page qui tourne sort de la zone d’affichage et n’est plus visible à fin de la rotation et le livre n’est composé que de pages en recto. Une page peut pivoter sur un des quatre bords du livre.

-	Faire tourner une page sur un axe au centre du livre. Dans cette implémentation (non disponible pour le moment), le livre est composé de pages en recto et verso. La rotation peut se faire sur un axe vertical ou horizontal.
Exemple

Code
^^^^

.

Spécificité de l’API
^^^^^^^^^^^^^^^^^^^^

.

vs.fx.PageCurlController
~~~~~~~~~~~~~~~~~~~~~~~~
Comme le contrôleur vs.fx.PageFlipController, le vs.fx.PageCurlController, affiche les vues sous la forme d’un livre, par contre l’animation de rotation d’une page simule un page qui se plie comme dans le cas d’un vrai livre.

Pour le moment l’implémentation ne supporte que des livres en recto, avec un page qui tourne sur un bord du libre et sort de la zone d’affichage à la fin de l’animation.

L’animation pour simuler une page qui se plie étant couteuse en temps de calcul il existe différentes configurations permettant d’optimiser l’effet en fonction de la performance de la plateforme et de la taille des vues à animées :

-	animation calculée en temps réel ;

-	animation pré-calculée ;

-	animation avec / sans ombre ;

-	animation avec / sans angle ;

Exemple
^^^^^^^

.

Code
^^^^

.

Spécificité de l’API
^^^^^^^^^^^^^^^^^^^^





[[api3]]
'*vs.fx.NavigationController*'
------------------------------

Le contrôleur de type vs.fx.NavigatorController offre la possibilité de naviguer au sien d’un ensemble de vue avec un une barre de navigation (vs.fx.NavigationBar). A la création de votre contrôleur, comme pour les autres contrôleurs, vous créez des états et les transitions entre état, et vous associez une barre de navigation.
Une action sur la barre (typiquement un back) enverra la commande adéquat au contrôleur, et inversement un changement d’état dans le contrôleur reconfigurera la bare pour refléter ce changement d’état.

Exemple
^^^^^^^

.Exemple de contrôleur de type '*vs.fx.NavigationController*'.
image::data/image002.png[]



Code
^^^^

-----------------
this.controller = new vs.fx.NavigationController (this, this.navBar);
this.controller.init ();

// 1.1 put the first view into the controller
this.controller.push (this.firstView);
// 1.2 configure the navigation bar for the first view (nothing)
this.controller.configureNavigationBarState (this.firstView.id, []);
// 1.3 finally configure the first view as the initial component
this.controller.initialComponent = this.firstView.id;

var backId = this.navBar.backButton.id;
var titleId = this.navBar.title.id;

// 2.1 set the second view, with parameters
var id = this.controller.push ('PanelOne', {position: [0, 44]});
// 2.2 configure the navigation bar to show the back button, the title
//  and set the text title
this.controller.configureNavigationBarState
  (id, [{comp: backId}, 
        {comp: titleId, properties: {text: 'Panel One'}}]);    
// 2.3 configure the transition between the first and second view
this.controller.configureTransition (this.firstView.id, id, 'goToOne');

// 3 set the third view
id = this.controller.push ('PanelTwo', {position: [0, 44]});
this.controller.configureNavigationBarState
  (id, [{comp: backId}, 
        {comp: titleId, properties: {text: 'Panel Two'}}]);    
this.controller.configureTransition (this.firstView.id, id, 'goToTwo');

// 3 set the last view
id = this.controller.push ('PanelThree', {position: [0, 44]});
this.controller.configureNavigationBarState
  (id, [{comp: backId}, 
        {comp: titleId, properties: {text: 'Panel Three'}}]);    
this.controller.configureTransition (this.firstView.id, id, 'goToThree');
-----------------








pass::[<br/>]
