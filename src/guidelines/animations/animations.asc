Animations avec ViniSketch Designer
===================================

pass::[<br/>]

*****************

L’API d’animation de VSD vous permet de créer simplement des transitions douces lors d’un changement d’état d’un objet graphique ou encore de créer des IHMs composées d’effets graphiques avancés (un fond animées, …)

Cette API s’applique sur tous les objets de type vs.ui.View et permet de manipuler une ou plusieurs propriétés graphiques de l’objet. Il est par exemple possible n’animé la taille, la position, la couleur, … Vous trouverez en annexe une liste des propriétés manipulables.


*****************


Table des matières
------------------

1. <<model, *Modèle*>>

2. <<api, *API*>>

3. <<examples, *Quelques exemples*>>

4. <<chain, *Enchaînement d’animations*>>

5. <<run_multiple, *Exécuter plusieurs animations en même temps*>>

6. <<annexe1, *Annexe 1 : liste des animations*>>

7. <<annexe2, *Annexe 2 : liste des propriétés*>>

*****************

*****************


[[model]]
Modèle
------

La toolkit de VSD propose deux moyens d’animer un objet graphique ;

1. Par l’appel de la méthode animate sur l’objet graphique;

2. Par la construction d’un objet '*vs.fx.Animation*' qui sera applicable sur un objet graphique.

Le premier modèle permet d’animer objet un graphique avec une API simple et concise.  Référez vous à l’API de référence pour plus d’information.

Ici nous traiterons de la seconde méthode qui offre plus de possibilité de configuration.

Objet '*vs.fx.Animation*'
~~~~~~~~~~~~~~~~~~~~~~~~~

Une animation est un objet de type '*vs.fx.Animation*', fonction du temps. Il se construit indépendamment de l’objet à animer.
Après configuration, il peut être utilisé autant de fois que nécessaire sur plusieurs objets graphiques différents et être reconfiguré selon vos besoins.

Une animation ('*vs.fx.Animation*') est définie par une ou plusieurs propriétés à animer et les valeurs que doivent prendre ces propriétés.

Lorsque l’animation est exécutée, les propriétés varient de leurs valeurs courantes à leurs valeurs cibles définies. A la fin de l’animation les propriétés animées auront les valeurs cibles définies. 


.Exemple d’une animations simple, combinant une rotation de 90 degrés et un déplacement horizontal.
image::data/image001.png[align="center"]

Il est également possible de définir une animation avec des points de passage (KeyFrame) (voir animation complexe). 

.Exemple d’animation complexe, combinant une rotation de 90 degrés et un déplacement horizontal pour la première étape, puis une seconde rotation de 90 degrés accompagnée d’un déplacement vertical.
image::data/image002.png[align="center"]

VSD propose des animations prédéfinies comme '*vs.fx.TranslateAnimation*', '*vs.fx.RotateAnimation'* … Dans ce cas, les propriétés à animer sont prédéfinies. Lors que vous utiliserez ce type d’animation, vous devrez uniquement définir les valeurs cibles associées à chaque animation.

Exemple
~~~~~~~


------------------
// 1) création d’une animation de déplacement avec un vecteur (x,y) de 50px*50px
my_animation = new vs.fx.TranslateAnimation (50, 50) ;

// 2) configutions suplémentaires
my_animation.duration = ‘3s’ ;
my_animation.timing = vs.fx.Animation.EASE;

// 3) application de l’animation sur deux objets graphiques
my_animation.process (objet1) ; // l’objet se déplace de 50x50px
my_animation.process (objet2) ;

// 4) à la fin de l’animation, libération de l’animation
free (my_animation) ;
------------------


Utiliser des variables
~~~~~~~~~~~~~~~~~~~~~~

Lorsque vous définissez les valeurs des propriétés à animer, vous pouvez utiliser des variables pour ces valeurs. Cela vous permet de définir des animations reconfigurable à volonté, plutôt que définir plusieurs fois une animation avec des valeurs différentes.

Il existe deux types de variable :

1.	Les variables « mot clef »

2.	Les variables libres.

Variable « mot clef »
^^^^^^^^^^^^^^^^^^^^^^

Il s’agit de variable dont le nom est réservé avec une sémantique et un comportement prédéfinis. 

L’API en compte deux : width et height ;

Leur syntaxe est la suivante : $width ou $height



*Exemple :*

------------------
a = new vs.fx.Animation (['translate', '$width']);
a.process (obj)
------------------

Dans ce cas l’animation va déplacer l’objet graphique d’autant de pixel que sa largeur.

Width
+++++
Variable référençant la largeur de l’objet animé.

Height
++++++
Variable référençant la hauteur de l’objet animé.

Variable libre
^^^^^^^^^^^^^^
Il s’agit d’une variable que vous pouvez reconfigurer « programmatiquement » à volonté.
Leur syntaxe est la suivante : ${name} tel que name := [a-zA-Z_]+


*Exemple :*

------------------
a = new vs.fx.Animation (['rotate', '${r}rad']);
a.r = Math.PI ;
a.process (obj) ;
…
a.r = Math.PI / 2 ;
a.process (obj) ;
------------------

[WARNING]
Etant donné que la définition d’une variable libre entraine la création d’un membre de même nom pour l’animation, il n’est pas possible d’utiliser le nom d’un membre ou d’une méthode déjà existant sous peine d’obtenir un comportement aléatoire.
De ce fait, ne sont pas autorisés les noms suivants : duration, durations, timing, timings, values, properties, origin, iterationCount, addKeyFrame, process and start.

[[api]]
API 
---

Constructeur
~~~~~~~~~~~~
[width="100%",cols="2,3,10"]
|=========================================================
|*vs.fx.Animation*| [Array of String]| liste de couples <propriété, valeur> à animer
|=========================================================

Membres
~~~~~~~
*duration  [String]* une durée pour toute l’animation.

*Ex :*
---------------
my_animation.duration = ‘3s’
---------------

[width="100%",cols="2,3,10",options="header"]
|=========================================================
|Name | Type | Information
|*durations*|[Array of String] | Les durées d’animation pour chaque propriétés.
|*timing*|[String]| Specifies how the intermediate values used during a transition are calculated.
|*timings*|[Array of String]| Specifies how the intermediate values used during a transition are calculated.
|*origin*|[Array of 2 number]| Specifies the number of times an animation iterates.
|*properties*| [Array of String]| The properties to animate
|*values*| [Array of String]| The values for each properties
|=========================================================


Methodes
~~~~~~~~
*addKeyFrame (pos, values) :*

Ajoute des points de passage à l’animation (cf. animation complexe)

*process(comp, clb, ctx)*

Exécute l'animation.

Lorsque vous avez configurer votre animation, appeler cette méthode pour animer l’objet graphique

Cette méthode prend en paramètre :

.	Une référence sur l’objet à animer (obligatoire !)

.	Une méthode qui sera appelée à la fin de l’animation (optionnel)

.	Un contexte associé à la méthode (par exemple un objet dont la méthode est membre)

*Exemple :*

-------------------------
obj.prototype.endAnimation = function (event)
{ ... }

obj.prototype.animate = function ()
{
 myAnimation.process (a_gui_object, this.endAnimation, this);
}
-------------------------

*start(param)*

Starts the task (cf. enchaînement d’animations). 

Start fait parti du protocole vs.core.Task. Son appel est équivalent à un appel de la méthode process.

[[examples]]
Quelques exemples
-----------------

Animations simples
~~~~~~~~~~~~~~~~~~

Animation avec une constante
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-------------------------
 a = new vs.fx.Animation (['translateX', '30px']);
 a.process (comp);
-------------------------

Animation avec une variable « mot clef »
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-------------------------
 a = new vs.fx.Animation (['translateX', '$width']);
 a.process (comp);
-------------------------

Animation avec un variable libre
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

-------------------------
 a = new vs.fx.Animation (['translateX', '${t}px']);
 a.t = 500;
 a.process (comp);
-------------------------

Animation multiple
^^^^^^^^^^^^^^^^^^

-------------------------
// define a animation with two transformations
animation = new vs.fx.Animation ([‘width’, '100px'], ['opacity', '0'])
// set duration for each animation
animation.duration = ['1s', '2s'];
// process
animation.process (comp);
-------------------------

Animations complexes
~~~~~~~~~~~~~~~~~~~~

Une animation complexe se distingue d’une animation simple dans le sens ou il est possible de définir un point de départ et des points de passage, ainsi qu’un nombre d’itération.

-------------------------
translate = new vs.fx.TranslateAnimation ();
translate.durations = '3s';
translate.iterationCount = 3;

translate.addKeyFrame (0, {x:0, y: 0, z:0}); // from peut être remplacé par 0
translate.addKeyFrame (20, {x:50, y: 0, z: 0});
translate.addKeyFrame (40, {x:50, y: 50, z: 0});
translate.addKeyFrame (100, {x:0, y: 0, z: 0}); // to peut être remplacé par 100

translate.process (myObject);

// Reconfigure l’animation en rajoutant un point de passage
translate.addKeyFrame (60, {x:0, y: 50, z: 0});
translate.process (myObject);
-------------------------


[[chain]]
Enchaînement d’animations
-------------------------

Dans le cas d’une animation faisant intervenir plusieurs objets graphiques avec plusieurs animations parallèles ou séquentielles vous pouvez utiliser l’API de vs.core.Task pour décrire les enchaînement d'animations.

'*vs.fx.Animation*' implémente le protocole vs.core.Task ce qui vous permet d’utiliser le scheduleur proposé par VSD pour gérer vos animations.

Exemples d’animation enchainées
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


-------------------------

var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);
rotate.durations = '3s';
var scale = new vs.fx.ScaleAnimation (2,0.5);
scale.durations = '2s';

// Déclaration d’une tâche séquentielle
var seq = vs.core.Task_SEQ ([rotate, comp1], [scale, comp2]);

// Start the task => démarre les animations séquentiellement.
// Lorsque le rotation sur l’objet comp1 et finie, le zoom sur l’objet2 démarre
seq.start ();

// Déclaration d’une tâche parallèle
var par = new vs.core.Task_PAR ([rotate, comp1], [rotate, comp2])

// Start the task => démarre les animations parallèlement.
// Les deux objets comp1 et comp2 tournent en même temps
par.start ();

// Déclaration d’un enchainement plus complexe
var seq_bis = new vs.core.Task_SEQ (seq, par)

// Les deux premières animations sont enchaînées séquentiellement.
seq_bis.start ();
-------------------------


[TIP]
Plusieurs objets de l’API de VSD implémentent le protocole vs.core.Task. Vous pouvez donc les exécuter en parallèle ou séquentiellement avec des animations. Par exemple, vs.av.Video ou vs.av.Audio, peuvent être synchronisées avec une animation.

[[run_multiple]]
Exécuter plusieurs animations en même temps
-------------------------------------------

Il est possible d’appliquer plusieurs animations sur le même objet graphique en même temps.

Par exemple comme cela :

-------------------------
var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);
var opacity = new vs.fx.OpacityAnimation (0);

opacity.process (obj); // fade de l’objet
rotate.process (obj); // rotation de l’objet
-------------------------

Dans cet exemple, les deux animations sont appliquées en même temps sur l’objet obj et fonctionnent donc en parallèle.
Cette méthode fonctionne bien dans la mesure où les deux animations ne manipulent pas les mêmes propriétés indépendantes.

Dans notre exemple '*vs.fx.RotateXYZAnimation'*, manipule la ‘rotation’ et '*vs.fx.Opacity*' l'‘opacity’,
Par contre si vous voulez utiliser en même temps '*vs.fx.RotateXYZAnimation*' et '*vs.fx.TranslateAnimation*' qui animent une rotation et une déplacement, vous aurez une animation invalide car ne sont pas indépendantes et dépendante d'une propriété plus générale nommée 'transform'.

Dans ce cas vous avez deux solutions :

1.	Créer deux objets graphique emboités et appliquer la première animation sur le premier objet et la deuxième sur le deuxième.

2.	Construire une nouvelle animation qui combine les deux animations. (par exemple qui tourne et bouge l’objet).

Ex cas 2:

-------------------------
new vs.fx.Animation (['rotate', '50deg'], ['translate', '10px, 10px, 0']);
-------------------------

Selon les types d’animations et les effets désirés, une des deux solutions peut être préférable à l’autre.

[[annexe1]]
Annexe 1 : Liste des animations prédéfinies disponibles
-------------------------------------------------------
 

[width="100%",cols="2,10",options="header"]
|=========================================================
|Name | Information
|*vs.fx.TranslateAnimation*|	Translate a object view over x, y, and z axes.
|*vs.fx.RotateAnimation*|	Rotate your object any number of degrees along the Z axis.
|*vs.fx.RotateXYZAnimation*|	Rotate your object any number of degrees over the X, Y and Z axes.
|*vs.fx.ScaleAnimation*|Scale your object over the X and Y axes
|*vs.fx.SkewAnimation*|	Skew your object over the X and Y axes
|=========================================================


[[annexe2]]
Annexe 2 : Liste des propriétés modifiables
-------------------------------------------

VSD propose des animations prédéfinies comme '*vs.fx.TranslateAnimation*', '*vs.fx.RotateAnimation*' … Dans ce cas les propriétés à animer sont déjà définies.
Dans le cas d’'*vs.fx.Animation*', il est possible de définir une ou plusieurs propriétés graphiques à animer.

Le tableau suivant donne la liste des propriétés modifiables :


[width="100%",cols="5,10",options="header"]
|=========================================================
|Name | Information
|*background-color*|color
|*background-image*|only gradients
|*background-position*|percentage, length
|*border-bottom-color*|color
|*border-bottom-width*|length
|*border-color*|color
|*border-left-color*|color
|*border-left-width*|length
|*border-right-color*|color
|*border-right-width*|length
|*border-spacing*|length
|*border-top-color*|color
|*border-top-width*|length
|*border-width*|length
|*bottom*|length, percentage
|*color*|color
|*crop*|rectangle
|*font-size*|length, percentage
|*font-weight*|number
|*grid-**|various
|*height*|length, percentage
|*left*|length, percentage
|*letter-spacing*|length
|*line-height*|number, length, percentage
|*margin-bottom*|length
|*margin-left*|length
|*margin-right*|length
|*margin-top*|length
|*max-height*|length, percentage
|*max-width*|length, percentage
|*min-height*|length, percentage
|*min-width*|length, percentage
|*opacity*|number
|*outline-color*|color
|*outline-offset*|integer
|*outline-width*|length
|*padding-bottom*|length
|*padding-left*|length
|*padding-right*|length
|*padding-top*|length
|*right*|length, percentage
|*text-indent*|length, percentage
|*text-shadow*|shadow
|*top*|length, percentage
|*vertical-align*|keywords, length, percentage
|*visibility*|visibility
|*width*|length, percentage
|*word-spacing*|length, percentage
|*z-index*|integer
|*zoom*|number
|*rotate*|String : rz
|*rotateX*|String : rx
|*rotateY*|String : ry
|*translateX*|String : tx
|*translateY*|String : ty
|*translate*|String : tx, ty, tz
|*screw*|String : sx, sy
|*scale*|String : sx, sy
|=========================================================

pass::[<br />]
