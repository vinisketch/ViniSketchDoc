Gestion de la mémoire et astuces
================================

pass::[<br/>]

*****************

La mémoire peut être un facteur rapidement limitant de votre application 
en particulier si vous gérez des images.

Ce document donne des astuces et recommandations pour le développement de votre application.

[WARNING]
CE DOCUMENT EST EN COURS DE REDACTION

*****************


Table des matières
------------------


1. <<limites, *Limitations des browsers*>>

1. <<pbs, *Problème récurants*>>

1. <<bonnes, *Bonnes pratiques*>>

1. <<refs, *Références*>>


*****************

*****************

[[limites]]
Limitations des browsers
------------------------



[[pbs]]
Problème récurants
------------------

Références circulaires
~~~~~~~~~~~~~~~~~~~~~~

Exemple issue de [1]

------------------
var obj;
window.onload = function()
{
  obj = document.getElementById("DivElement");
  document.getElementById("DivElement").expandoProperty = obj;
  obj.bigString = new Array(1000).join(new Array(2000).join("XXXXX"));
};
------------------



Autre exemple issue de [1]

------------------
<html>
<head>
<script type="text/javascript">
document.write("Circular references between JavaScript and DOM!");
function myFunction(element)
{
  this.elementReference = element;
  // This code forms a circular reference here
  //by DOM-->JS-->DOM
  element.expandoProperty = this;
}
function Leak() {
  //This code will leak
  new myFunction(document.getElementById("myDiv"));
}
</script>
</head>
<body onload="Leak()">
<div id="myDiv"></div>
</body>
</html>
------------------

XXX
~~~

[[bonnes]]
Bonnes pratiques
----------------

Forcer la libération de la mémoire
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Le JavaScript utilise un "Garbage Collector" qui doit libérer la mémoire dès que
vous n'utilisez plus un objet, c'est-à-dire lorsqu'un objet n'est plus référencé.

Dans la réalité, souvent il reste une référence cachée dans votre code qui
empêche le GC de faire correctement son travail.

Il est donc nécessaire d'utiliser systématiquement l'opérateur delete sur les objets JavaScript "standards" et free sur les objets de la toolkit VSD. Ces deux
fonctions vous forcer la libération des référence, ce qui permettra au GC de
libérer correctement la mémoire.


Exemple de code

------------------
var myObj = {};
myObj.data = [];

...

delete myObj.data;
------------------


Exemple de code

------------------
var myImg = new vs.ui.ImageView ();
myImg.src = 'image.png';

...

free (myImg);
------------------

Cet appel force non seulement la libération de l'objet vs.ui.ImageView, mais va
forcer la libération de la mémoire allouée pour l'image 'image.png'


Optimisez vos images
~~~~~~~~~~~~~~~~~~~~


JPEG plutot que PNG
^^^^^^^^^^^^^^^^^^^

Les JPEG sont mieux compressés que les PNG ...
De plus vous avez un controle fin du taux de compression ...

Optimisez la taille des images
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Cela parait une évidence, mais vérifiez bien que vos images ont une taille 
optimale par rapport à vos besoins, en particulier qu'elles n'ont pas une 
résolution supérieure à ce qui est nécessaire.

Background image plutôt que '*vs.ui.ImageView*'
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Si vous utilisez une image pour un fond par exemple ou sur laquelle vous
n'appliquerez pas de transformation particulière, alors il est recommandé
d'utiliser votre image comme le fond d'un objet graphique, plutôt que 
de créer un objet '*vs.ui.ImageView*' spécifique.

En effet la construction d'un objet '*vs.ui.ImageView*' nécessite plus de mémoire que
l'utilisation de l'image comme fond.

Ex de code

------------------
var myObj = new vs.ui.View ();
myObj.setStyle ('background-image', 'url(image.png)');
------------------

est moins couteux en mémoire que

------------------
var myObj = new vs.ui.View ();
var myImg = new vs.ui.ImageView ();
myImg.src = 'image.png';
myObj.add (myImg);
------------------


[[refs]]
Références
----------

[1] : *Memory leak patterns in JavaScript:*
Handling circular references in JavaScript applications

http://www.ibm.com/developerworks/web/library/wa-memleak/

pass::[<br/>]